<% 

  assets_dir = 'images/' #base directory of all assets
  #used to be 'app/assets/images/' 
  active_slide_class = 'active-slide' #HTML class to be used for the active slide - This is used by the javascript and css to display and style things.
  full_dir = "#{assets_dir}" + "#{@image_dir}" #image_dir is provided by the respective partial
   #  full_dir = asset_path full_dir
    # active_slide = 1 # 1-indexed number of the active slide. Later it will be dynamic

    #Use the counter to determine what slide is the active one and set its class below.
  counter = 0

  if params[:id].nil?
        active_slide = 1
  else
      active_slide = params[:id]
      active_slide = active_slide.to_i
  end

    
  #files_in_folder = Dir[File.join(full_dir, '**', '*')].count { |file| File.file?(file) } #Counts the amount of files in the directory determined by the active tab
  #the loop below loops creates files_in_folder amount of divs that contain an image element, whose source is full_dir/<NUMBER OF SLIDE>.jpg. Additionally, for the active slide, it adds the active_slide_class value

  #s3::list_objects(bucket:ENV['AWS_S3_BUCKET'], prefix: 'images/peopleSlides').contents.map(&:key).slice(1..-1).count

  #does a request to our s3 bucket using the AWS-SDK. Prefix is the "directory", contents is the part of the full response that lists the files inside
  #our bucket that match our constraints. In this case, the "prefix" helps us get only the "directory" we want within the bucket.
  #contents.map(&:key) presents only the key (so its like the root + included files). the slice method is added to exclude the 0 index, which is the "root" of the directory
 
  if Rails.env.production?
    s3 = Aws::S3::Client.new
    files_in_folder = s3::list_objects(bucket:ENV['AWS_S3_BUCKET'], prefix: full_dir).contents.map(&:key)

    files_in_folder.each do |file|
        file.gsub!("#{full_dir}/", "")#remove the dir from the key (file) name
    end
    files_in_folder.delete_if {|file| "#{file}" === ""}
  else
   files_in_folder = Dir.entries("#{full_dir}/") - %w[. ..] #remove dots.
  end
  
  #to be taken out, just trying for dev
  #size_prefixes = [100, 480, 700, 900, 1100, 1500, 2000] #should be the same as the admin_controller#upload_file ones.

  s3 = Aws::S3::Client.new
  files_in_folder = s3::list_objects(bucket:ENV['AWS_S3_BUCKET'], prefix: full_dir).contents.map(&:key)

  original_files = files_in_folder.select{ |key| key.start_with?("#{full_dir}/original-")}.map do |key|
  # debugger
      key.gsub!("#{full_dir}/original-", '')
  end

  files_in_folder.sort! {|a,z| a.to_i <=> z.to_i}
  
%>




<% original_files.each do |slide| %> 
    <% counter += 1 %>
    <% if counter === active_slide %>

      <%= content_tag :div, class: "#{@tab_value} #{active_slide_class}" do -%>
        <%= image_tag("#{@image_dir}/#{slide}") -%> 
      <% end -%>

    <% else %>
    
    <%= content_tag :div, class: "#{@tab_value}" do -%>
      <%#= image_tag("#{@image_dir}/#{slide}-placeholder"), id="#{slide}"-%>
      <%= image_tag("")-%>
        <div class="dots-container">

          <div class="dots">

            <div class="outer-border first">
              <div class="inner-border first"></div>
            </div>

          </div>  

          <div class="dots">

            <div class="outer-border second">
              <div class="inner-border second"></div>
            </div>  

          </div>   

          <div class="dots">

            <div class="outer-border third">
              <div class="inner-border third"></div>
            </div>

          </div>
        
        </div>

    <%# id de imagen en el div contenedor de la imagen y luego reemplazar el innerhtml del div con el div de la imagen -%>
    <% end -%>
  <% end %>

<% end %>

