<% 

  assets_dir = 'images/' #base directory of all assets
  #used to be 'app/assets/images/' 
  active_slide_class = 'active-slide' #HTML class to be used for the active slide - This is used by the javascript and css to display and style things.
  full_dir = "#{assets_dir}" + "#{@image_dir}" #image_dir is provided by the respective partial
   #  full_dir = asset_path full_dir
    # active_slide = 1 # 1-indexed number of the active slide. Later it will be dynamic

    #Use the counter to determine what slide is the active one and set its class below.
  counter = 0

  if params[:id].nil? #params :id  comes from /tabs_retriever which is accessed by AJAX calls
        active_slide = 1
  else
      active_slide = params[:id] 
      active_slide = active_slide.to_i
  end

    
  #files_in_folder = Dir[File.join(full_dir, '**', '*')].count { |file| File.file?(file) } #Counts the amount of files in the directory determined by the active tab
  #the loop below loops creates files_in_folder amount of divs that contain an image element, whose source is full_dir/<NUMBER OF SLIDE>.jpg. Additionally, for the active slide, it adds the active_slide_class value

  #s3::list_objects(bucket:ENV['AWS_S3_BUCKET'], prefix: 'images/peopleSlides').contents.map(&:key).slice(1..-1).count

  #does a request to our s3 bucket using the AWS-SDK. Prefix is the "directory", contents is the part of the full response that lists the files inside
  #our bucket that match our constraints. In this case, the "prefix" helps us get only the "directory" we want within the bucket.
  #contents.map(&:key) presents only the key (so its like the root + included files). the slice method is added to exclude the 0 index, which is the "root" of the directory
 
  if Rails.env.production?
    s3 = Aws::S3::Client.new
    files_in_folder = s3::list_objects(bucket:ENV['AWS_S3_BUCKET'], prefix: full_dir).contents.map(&:key)

    files_in_folder.each do |file|
        file.gsub!("#{full_dir}/", "")#remove the dir from the key (file) name
    end
    files_in_folder.delete_if {|file| "#{file}" === ""}
  else
   files_in_folder = Dir.entries("#{full_dir}/") - %w[. ..] #remove dots.
  end
  
  #to be taken out, just trying for dev
  #size_prefixes = [100, 480, 700, 900, 1100, 1500, 2000] #should be the same as the admin_controller#upload_file ones.

  s3 = Aws::S3::Client.new
  files_in_folder = s3::list_objects(bucket:ENV['AWS_S3_BUCKET'], prefix: full_dir).contents.map(&:key)

  original_files = Array.new #will contain the base filename of each photo
  sizes_per_file = Hash.new #A hash with the following structure = "filename" => [available image sizes] } 

  files_in_folder.select{ |key| key.start_with?("#{full_dir}/original-")}.map do |key|
  # debugger

      base_file = key.gsub("#{full_dir}/original-", '')
      versions = Array.new #Will include all the available versions of the file (depending on base_file dimensions)

      files_in_folder.select { |file_route| file_route.include?(base_file) }.map do |version|

        #base_filename as hashkey, [version] as value
       # debugger
        to_add = version.gsub("#{full_dir}/", '') #removes the file route
             #  debugger
        to_add = to_add.gsub("-#{base_file}", '') #removes the dash that separates the base filename and the filename itself
 
        if to_add != "original"  #don't add the "original" string to the array.
         versions.push to_add 
        end 

      end

      original_files.push base_file #adds the base file to the original files Array
      sizes_per_file[base_file] = versions #creates an entry in the sizes_per_file hash for the file we just added, listing
      #its available sizes

  end




  original_files.sort! {|a,z| a.to_i <=> z.to_i}
  
%>


<%# maybe I could save a list of available sizes for each image, send them to the front end
and program JS to decide what to use depending on size availability and clientWidth? %>

<%# create a hash  {full_image_path => [1100, 900, 700, 480, 100] for example? So we have a list of available sizes per image %>

<% original_files.each do |slide| %> 
    <% counter += 1 %>
    <% if counter === active_slide %>

      <%= content_tag :div, class: "#{@tab_value} #{active_slide_class}" do %>
        <%= image_tag("#{@image_dir}/#{slide}", id: "#{full_dir}/#{slide}", data: {sizes: sizes_per_file[slide]} ) %> 
      <% end %>

    <% else %>
    
    <%= content_tag :div, class: "#{@tab_value}" do %>
      <%#= image_tag("#{@image_dir}/#{slide}-placeholder"), id="#{slide}"-%>
      <%= image_tag("", id: "#{full_dir}/#{slide}", data: {sizes: sizes_per_file[slide]} ) %>
    <%= render 'layouts/loadAnim' %>

    <%# id de imagen en el div contenedor de la imagen y luego reemplazar el innerhtml del div con el div de la imagen -%>
    <% end %>
  <% end %>

<% end %>

