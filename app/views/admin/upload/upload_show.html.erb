
<%= javascript_include_tag 'jquery'%>
<%= javascript_include_tag 'jquery_ujs'%>
<%= stylesheet_link_tag 'admin', media: 'all' %>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<%= csrf_meta_tag %>
<div class="user-data-form-container">


      <% flash.each do |message_type, message| %>
        <div class="alert alert-<%= message_type %>"><%= message %></div>
      <% end %>

<% s3 = Aws::S3::Client.new %>

<% files_in_bucket = s3.list_objects(bucket: ENV['AWS_S3_BUCKET'], encoding_type: 'url').contents.map(&:key) %>




<style>
li {
margin-left: 100px;
margin-top: 20px;
margin-bottom: 20px;

}
ul, span {
cursor: pointer;

}

.upload-dir-container {
border: 1px solid blue;
background-color: rgb(200, 200, 200);
text-decoration: underline blue;

}

.selected {
background-color: blue;
color: white;
font-weight: bold;
font-style: italic;

}
</style>

<span class="action-title">File Manager</span>
<span class="action-description">Here you can browse the files currently in your S3 bucket</span>
<p class='action-description'>Notes:<br>Ctrl + left click (or long touch on mobile devices) selects/unselects files</p>

<div class="upload-dir-container", id="root">
</div>

<%= button_to "Download file", admin_upload_path, class: 'file-manager-button', :id => "download-file", :remote => false %> 
<%= button_to "Delete files", admin_upload_path,  class: 'file-manager-button', :id => "delete-files" %>

<%= form_for(:image, url: admin_upload_path, html: {multipart: true, id: 'upload-file-form'}) do |f| %>
	<%= f.submit "Upload image", :id =>'upload-file' %>
	<%= f.label :image %>
	<%= f.file_field :image, class: 'upload-btn', accept: 'image/jpeg, image/gif, image/png', :id =>'file_input_field' %>
	<%= f.hidden_field :image_cache %>
<% end %>

<script>


	var root = document.getElementById("root");

	var myArray = <%= raw files_in_bucket %>

	var currentIndex = 0;
	var fileREGEX = /([\w]+[.]*[\w]+\/)*([\w]+[.]*[\w]+.*\-*)/; //  gets all directories + filenames with . and -
	var folderREGEX = /([\w]+[.]*[\w]+\/)*/; // all directories, excludes files
	var singleFolderREGEX = /([\w]+[.]*[\w]+\/)/; //get just a single folder

	var counter = 0;
	var currentFolder = root;
	var parentFolder = root;

	function createFolder(object, currIndex) {
			var object = object;

			var newFolder = (function createTheFolder() {
				var newFolder = document.createElement("ul");//.classList.add("folder");
				newFolder.classList.add("folder");
				var folderSpan = document.createElement("span");
				var folderSpanText = document.createTextNode(object.replace(parentFolder.id, ''));
				folderSpan.appendChild(folderSpanText);
				newFolder.appendChild(folderSpan);
				newFolder.id = object;
				return newFolder;
			})();


		currentFolder.appendChild(newFolder);



		if ((currIndex+1)<myArray.length && myArray[currIndex+1].includes(newFolder.id)) {// && newFolder.id.replace(myArray[currIndex+1], '') != "")  {
			//currentFolder = newFolder.parentElement;
		//	console.log("big calc");
			currentFolder = newFolder; //document.getElementById(currentFolder.id.split(myArray[currIndex+1].split(currentFolder.id)));
		}
		else if(currIndex+1<myArray.length){
			//currentFolder = root;

//currentFolder = document.getElementById(currentFolder.parentElement.id.split(currentFolder.id.split(currentFolder.parentElement.id))) || root;
currentFolder = document.getElementById(currentFolder.id.split(myArray[currIndex+1].split(currentFolder.id))) || root;
		} 

return;
	}

	function createFile(object, currIndex) {

		var file = document.createElement("li");
		file.classList.add("file");
		var fileName = document.createTextNode(object.replace(folderREGEX, ''));
		file.appendChild(fileName);
		file.id = object.replace(folderREGEX, '');
		currentFolder.appendChild(file);
		console.log("OBJECT FILE", object);
		console.log("CURRENT FOLDER FILE", currentFolder);

	/*	if (myArray[currIndex+1]<myArray.length && myArray[currIndex+1].includes(currentFolder.id)) {

			//currentFolder = currentFolder.parentElement.parentElement; // document.getElementById(currentFolder.parentElement.id.split(currentFolder.id.split(currentFolder.parentElement.id)));
			currentFolder = document.getElementById(currentFolder.id.split(myArray[currIndex+1].split(currentFolder.id))) || root;
		}*/

		//else 

		if(myArray[currIndex+1].includes(currentFolder.id)) {
				console.log("next index", myArray[currIndex+1]);

				if(myArray[currIndex+1].match(folderREGEX).input === myArray[currIndex+1].match(folderREGEX)[0]){
					currentFolder = currentFolder.parentElement;// === root ? currentFolder = root: currentFolder.parentElement;
					return;

				}


				else if(myArray[currIndex+1].match(fileREGEX).input === myArray[currIndex+1].match(fileREGEX)[0]) {
				//currentFolder = currentFolder === root ? currentFolder = root : currentFolder.parentElement;
				console.log("POPPIN");
					currentFolder = currentFolder;
					return;

				}

				else {
					currentFolder = currentFolder.parentElement;
					return;

				}
		}
		else {

			//currentFolder = currentFolder === root? root : currentFolder.parentElement;
			console.log("THE NEW FUNC");
			console.log("next", myArray[currIndex+1]);

			// do parentElement until currIndex+1 includes currentFolder, then currentFolder = currentFolder
			currentFolder = (function() {

			/*	while(root.id + myArray[currIndex+1] != root.id + currentFolder.parentElement + myArray[currIndex+1] && currentFolder != root){
					currentFolder = currentFolder.parentElement;
				}*/

				while(!myArray[currIndex+1].includes(currentFolder.id) && currentFolder != root) {
					currentFolder = currentFolder.parentElement;
				}

				return currentFolder;

			})();



			// loop parentElement until parentElement + object === root + object;
			
		}









		console.log("FOLDER AFTER MODIF", currentFolder);

		return;
	}

	function directorize(array) {

		array.map(function(element, index, array) {
			if(counter > myArray.length*5) {
				return;
			}
			else {
				if(element.match(folderREGEX).input === element.match(folderREGEX)[0]){
					//if element value == '*/' (that is, whatever value that ends in a slash), then the element is a folder
					currentIndex = index;
					counter = counter + 1;
					createFolder(element, currentIndex);
					return;
				}
				if(element.match(fileREGEX).input === element.match(fileREGEX)[0]){
					//element name is *, without a slash at the end, then it is a file.
					currentIndex = index;
					createFile(element, currentIndex);
					counter = counter + 1;
					return;
				}
				if(index+1>array.length) {
					return;
				}
			}
		});

	}

	directorize(myArray);


	function toggleSelectedState(event) {
		if(event.ctrlKey ===  true){
			event.target.classList.toggle('selected');
			return false;
		}
		else{
			return true;
		}
	}

	

	[].slice.call(document.getElementsByTagName("li")).map(function(element, index, array) { // hides all <li> by default...
		
		if(element.parentElement != root) {

		element.style.display = "none";
		}

		element.addEventListener("click", function(event) {		
			toggleSelectedState(event);	
		});
	});

	[].slice.call(document.getElementsByTagName("span")).map(function(element, index, array) { //but toggles them when you click the folder's <span>

		element.addEventListener("click", function(event) {
			var continueFunction = toggleSelectedState(event);
			if(!continueFunction) {
				return
			}
			else {""};


			[].slice.call(element.parentElement.children).slice(1).map(function(element,index, array) {
				element.style.display === "none" ? element.style.display = "" : element.style.display = "none";
			});

		});

	});

	$('#download-file').click(function(event) {
		event.preventDefault();

		//AJAX request sending the array of stuff to download (or just 1 thing)
		  var req = new XMLHttpRequest();
		  
		  var fullFileRoute = (function() {
				  					var selectedFile = document.getElementsByClassName('selected')[0];
				  					var routeToFile = document.getElementsByClassName('selected')[0].id;

				  					routeToFile = (selectedFile.parentElement.id + routeToFile).replace(root.id, '')

				  					return routeToFile;
							})();

		  var params = '?file=' + fullFileRoute;

		  req.open("GET", 'download_file' + params, true);

		  req.responseType = "blob";
		 

		  req.onload = function (event) {
		    var blob = req.response;
		    console.log(blob.size);
		    var link=document.createElement('a');
		    link.href=window.URL.createObjectURL(blob);
		    var fileName = document.getElementsByClassName('selected')[0].id.split('.')
		    link.download= fileName[0] + "." + fileName[1];
		    link.click();
		  };

		  req.send();

	});

	$('#delete-files').click(function(event){
		event.preventDefault();
		var deleteArray = (function() {
								var selected = [];
								[].slice.call(document.getElementsByClassName('selected')).map(function(element, index, array) {							
									selected.push(element.id);
								});
								return selected;
							})();
		$.ajax({url: "delete_file", data: JSON.stringify({files:deleteArray}) , type: 'DELETE', contentType: 'application/json', dataType: 'json'})
		//AJAX sending the array/method to use to delete the files we need to delete




	});




	document.getElementsByClassName('upload-btn')[0].addEventListener('change', function() {
		var size_megabytes = this.files[0].size/1024/1024
		if(size_megabytes > 5){
			alert('Maximum file size is 5 MB. Please choose a smaller file')
			}
	});



	$('#upload-file-form').submit(function(event){
		event.preventDefault();

		uploadRoute = document.getElementsByClassName('selected')[0].id === root.id ? "" : document.getElementsByClassName('selected')[0].id;

		var filesToUpload = $('#file_input_field').files
		var formData = new formData();

		filesToUpload.map(function(element, index, array) {

			if(!element.type.match('image.*')) {
				return;
			}
			else {
				formData.append("image", element.name);
			}

		});


		$.ajax({url: 'upload_file', data: formData, type: 'POST'});

		

	});




</script>

<%# 
Useful links to do this:


http://docs.aws.amazon.com/sdkforruby/api/Aws/S3/Client.html

	#delete_object(options = {}) ⇒ Types::DeleteObjectOutput
	Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object.


	#delete_objects(options = {}) ⇒ Types::DeleteObjectsOutput


	#abort_multipart_upload(options = {}) ⇒ Types::AbortMultipartUploadOutput
	Aborts a multipart upload.


	To verify that all parts have been removed, so you don't get charged for the part storage, you should call the List Parts operation and ensure the parts list is empty.
	
	#get_object(options = {}) ⇒ Types::GetObjectOutput
	Retrieves objects from Amazon S3.

#head_bucket(options = {}) ⇒ Struct
This operation is useful to determine if a bucket exists and you have permission to access it.

#copy_object(options = {}) ⇒ Types::CopyObjectOutput
Creates a copy of an object that is already stored in Amazon S3.





#put_object(options = {}) ⇒ Types::PutObjectOutput
Adds an object to a bucket.

#downloads
https://ruby.awsblog.com/post/Tx354Y6VTZ421PJ/Downloading-Objects-from-Amazon-S3-using-the-AWS-SDK-for-Ruby

%>

</div>
