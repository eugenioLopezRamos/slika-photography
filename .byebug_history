continue
User.find(new_user_at_creation)
User.find(new_user_at_creation.id)
new_user_at_creation.authenticated?(:activation, new_user_at_creation.activation_token)
new_user_at_creation.authenticated?
continue
assigns(:current_user)
continue
assigns(:current_user)
continue
assigns(:current_user)
continue
assigns(:current_user)
continue
session[:new_user_at_creation]
session[new_user_at_creation.id]
session[new_user_at_creation]
@current_user
current_user
is_logged_in?
cookies
new_user_at_creation.id
session.delegate
session(delegate)
session[:delegate][:flash]
session[:delegate]
session
session.delegate
session.delegate[:flash][:flashes][:admin_user_id]
session.flash[:flashes]
session.flashes[:admin_user_id]
session.flash[:admin_user_id]
session.flash(admin_user_id)
session.admin_user_id
session
sessio
session(@current_user)
session(current_user)
current_user
assigns(:current_user)
continue
var all
var alll
val all
continue
var all
continue
var all
var
continue
cookies[:new_user_at_creation].id
cookies[:new_user_at_creation]
cookies[:new_user_at_creation.id]
cookies[new_user_at_creation.id]
cookies.signed[new_user_at_creation.id]
cookies.permanent.signed[new_user_at_creation.id]
session[new_user_at_creation.id]
new_user_at_creation
continue
session.inspect
session
session(:new_user_at_creation)
session(:admin_user_id)
cookies
cookies[:admin_id]
cookies.permanent.signed[:admin_user_id]
session
assigns(:user)
assigns(:current_user)
@current_user
continue
new_user
get edit_admin_account_activation_path(new_user_at_creation.activation_token, email: new_user_at_creation.email)
new_user.activated
admin_user_path new_user
new_user
continue
new_user
continue
new_user
continue
new_user
continue
new_user
assert_redirected_to
follow_redirect!
user
get edit_admin_account_activation_path(new_user.activation_token, email: new_user.email)
user = assigns(:user)
continue
assigns(:user)
get edit_admin_account_activation_path(new_user.activation_token, email: new_user.email)
assigns(:user).reload
assigns(:user)
continue
assigns(:user)
continue
assigns(:user)
continue
assigns(:user)
continue
:user
(:user)
assigns(:user)
:user
continue
assigns(:user)
continue
assigns(:user).activated
assigns(:user)
continue
var instance
var
var local
@user
:user
assigns(:user)
continue
file.original_filename
zip_entry.name
continue
zip_entry
continue
params
continue
params
continue
ActiveSupport::JSON.encode("authenticity-token" => mock_auth_token, "files" => files_array)
continue
params
continue
params[:files]
params
continue
params[:'files']
params[:'authenticity-token']
params[:authenticity-token]
params
continue
params
continue
sel_file
continue
file.original_filename
zip_entry.name
continue
zip_entry.name
file.original_filename
continue
file.original_filename
zip_entry.name
continue
uploaded_images_array.methods
uploaded_images_array.index
uploaded_images_array.inspect
file
continue
upload_images_array
entry.name
entry
continue
file.original_filename
entry.name
continue
entry.name
file.original_filename
continue
file.original_filename
entry.name
@current_entry
zip_file.current_entry
zip_file
uploaded_images_array
continue
uploaded_images_array
continue
file.original_filename
file.original_filename ===  entry.name
continue
file.original_filename
entry.name
entry
Zip::InputStream.open(entry).rewind
entry.rewind
entry
entry.name
file.original_filename
entry.name
file.original_filename ===  entry.name
continue
entry.name
file.original_filename
file
continue
file.class
file.size
file
uploaded_images_array[0]
uploaded_images_array
file
file.inspect
file
file.original_filename
entry.name
continue
Zip::InputStream.open(zip_file_location)
continue
zip_entry.name
file.original_filename
continue
zip_entry
continue
zip_file.read(zip_entry)
zip_file.read
zip_file
zip_file.rewind
zip_file.open
File.open(zip_file)
zip_file
continue
file.original_filename
continue
File.open(zip_file_location)
File.open(zip_file_location).rewind
zip_file::get_input_stream(zip_file).rewind
zip_file::get_input_stream(zip_entry).rewind
zip_file::get_input_stream(zip_entry)
zip_file::get_input_stream.rewind
zip_file::InputStream.rewind
zip_file.rewind
Zip::File(zip_file_location).rewind
Zip::File.rewind(zip_file_location)
Zip::File.open(zip_file_location).rewind
Zip::File.open(zip_file_location)
Zip::InputStream.open(zip_file_location).rewind
Zip::InputStream.open(zip_file_location).read
Zip::InputStream.open(zip_file_location)
Zip::InputStream.open(zip_file_location).rewind
zip_entry.rewind
zip_entry::InputStream.rewind
zip_file::InputStream.rewind
zip_file.rewind
zip_file
continue
file.original_filename
zip_entry.name
continue
zip_entry.name
file.original_filename
continue
file.original_filename
file.original_name
zip_entry.name
zip_entry
continue
uploaded_images_array.length
