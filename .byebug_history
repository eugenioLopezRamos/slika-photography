continue
var local
continue
var local
continue
user
var local
continue
var local
continue
user
var local
continue
var local
user.email
user
continue
user
continue
user
var local
var
continue
self.setup
var const
var args
var
var global
var instance
var
var local
continue
users(:mary)
user(:mary)
users
var instance
var
current_user
continue
user
continue
user.email
user
var local user
var local
user
continue
user.email
user
admin.test
var local
continue
user
continue
user.name
var local
var
continue
user
var local
var
params
continue
log_in_as @notadmin
log_in_as @mary
@notadmin = users(:mary)
self.setup
@notadmin
continue
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r").read
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r").rewind
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r").read
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r")
download_log
continue
asdasdsad
q
continue
asdasdasd
asdasdasdasd
continue
params[:'authenticity-token']
continue
params[:authenticity-token']
params[:authenticity-token]
params
continue
araparams
paramsparams
asdasd
continue
params
continue
@operation_results.to_s
continue
"#{@operation_results}"
@operation_results
continue
@download_log.read
download_log.read
@download_log.rewind
@download_log.read
@download_log.write("kek")
@download_log.write("kek"
@download_log
continue
@operation_results
operation_results
continue
@operation_results
debugger
continue
params[:image].image.size
params[:image].size
continue
image
image.tempfile
image
image.tempfile
image
image_file
image.file
continue
@user
del_caller
continue
params[:image].class
params[:image]
params[image]
params
continue
params
q
continue
params
params[:image][image][]
image[image]
params
q
continue
var instance
var local
var 
params
continue
if !gotten_file.nil?
if gotten_file.nil? puts "kajajsajjs" then end
if !gotten_file.nil? puts "kajajsajjs" then end
if !gotten_file.nil? puts "kajajsajjs" end
continue
!gotten_file.nil?
D!gotten_file.nil?
gotten_file.nil?
gotten_file
continue
unless gotten_file.nil? then puts "5" end
unless gotten_file.nil? then puts "5"
unless gotten_file.nil?
gotten_file.nil?
gotten_file
continue
to_delete.length
to_delete.uniq!.length
to_delete.uniq.length
to_delete.uniq
to_delete.length
to_delete
continue
:q
continue
s3.list_objects(bucket: ENV['AWS_S3_BUCKET'], key: "#{image_file_route}#{image_file_name}")
s3.list_object(bucket: ENV['AWS_S3_BUCKET'], key: "#{image_file_route}#{image_file_name}")
continue
uploaded_file_route.select{ |entry| entry.key === "#{image_file_name}" }.map(&:key)
uploaded_file_route
continue
image_file_route
params[:file_route]
continue
s3.list_objects(bucket: ENV['AWS_S3_BUCKET'], delimiter: image_file_route).contents
continue
s3.list_objects(bucket: ENV['AWS_S3_BUCKET'], delimiter: image_file_route).contents
image_file_route
params[:file_route]
continue
uploaded_file_route
continue
image_file_route
uploaded_file_route
continue
params[:image]
continue
to_delete
continue
to_delete
to_detele
continue
asdasdasd
continue
dasdasd
continue
to_delete
continue
to_delete
to_Delete
continue
to_delete
continue
to_delete
continue
to_delete
continue
to_delete
.
continue
to_delete
continue
to_delete
to_delete.to_yaml
to_delete.to_param
to_delete.to_d
to_delete.to_c
to_delete.to_r
to_delete.to_a
to_delete
continue
to_delete
continue
to_delete
%w(to_delete.to_s)
to_delete.to_s
to_delete
%w(#{to_delete})
%w(to_delete)
to_delete.to_a
to_delete
continue
to_delete
continue
to_delete
continue
entry.key
image_file_name
continue
image_file_name
continue
entry.key === "testfile.jpg"
entry.key
continue
entry.key
continue
entry.key
continue
entry.key
continue
entry.key
