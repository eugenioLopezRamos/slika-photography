continue
img.to_xhtml
img
continue
img.to_xhtml
img
continue
full_src
continue
full_src[0]
continue
img['src'].split("/")
continue
full_src
continue
@sizes
continue
@route
@sizes
continue
q
@sizes
continue
params[:post][:content]
content
continue
content.include? initial_img
img.to_html
initial_img
content
continue
initial_img
content
continue
initial_img.to_html
content.gsub(initial_img.to_html, "")
content
continue
img
content
continue
content
continue
replacements[0]
replacements.length
continue
replacements
continue
replacements[0].to_html
replacements.to_html
replacements
continue
replacements
continue
content
continue
@modified_content
continue
@modified_content
continue
content
continue
content_img_tags[0]
content_img_tags
continue
img
continue
@modified_content
continue
@sizes
continue
@sizes
continue
s3.list_objects(bucket: ENV['AWS_S3_BUCKET'], marker: @route).contents
@route
@sizes
continue
@route
@sizes
continue
q
"#{@route}#{@file}"
@route
@sizes
continue
@sizes
continue
@sizes
continue
@sizes
continue
@sizes
continue
img['data-sizes']
continue
img['data-file']
img['data-route']
img[data-route]
img
continue
@modified_content
continue
content
continue
content_img_tags
continue
img.map{|i| i['src']}
img.map
img
continue
content_img_tags[0].map {|i| i['src']}[0]
content_img_tags[0].map {|i| i['src']}
content_img_tags[0]
content_img_tags
continue
img
img.map {|i| i['src']}
img
continue
params[:post][:content]
params[:content]
content
@modified_content
continue
@modified_content
continue
@modified_content
continue
tfl.select{ |entry| entry.key === "#{image_file_name}"  }.map(&:key)
tfl.select{ |entry| entry.key === "#{image_file_route}#{image_file_name}"  }.map(&:key)
tfl = s3.list_objects(bucket: ENV['AWS_S3_BUCKET'], marker: image_file_route).contents
image_file_route
image_file_name
continue
test_uploaded_file_listing
vs = ["#{file_route}#{image_file_name}"]
v = ["#{file_route}#{image_file_name}"]
v =["#{file_route}#{image_file_name}"]
image_file_name
file_route
quit!
id
quit!
continue
assert_select "[data-sizes]"
[data-sizes]
continue
correct_sizes
continue
@sizes_per_file[filename]
correct_sizes
continue
filename
continue
str = img_ids.include? id ? str = id : str = ""
img_ids.include? id ? id : ""
filename
quit!
continue
@sizes_per_file[filename]
@sizes_per_file
filename
continue
id
continue
id
continue
id
continue
id
continue
id
continue
id
continue
id
continue
id
continue
img_ids
continue
images.select {|filename| filename.include? "original-"}
images
continue
@image_dir
@assets_dir
@public_folder
continue
images
continue
images
continue
@tabs
continue
@active_slide
@active_Slide
@counter
counter
continue
@active_slide === @counter
@active_slide
@counter
continue
image
continue
File
File.open(image, 'rb')
image
continue
image_file
image
continue
optimized_array
coptimized_array
continue
optimized_array
continue
applicable_widths
@to_upload
continue
@to_upload
continue
MimeMagic.by_magic(image)
continue
params[:image]
continue
MimeMagic.by_magic("#{params[:image][0]}")
MimeMagic.by_path(params[:image][0].path)
MimeMagic.by_path(params[:image][0].tempfile.path)
MimeMagic.by_magic(params[:image][0].tempfile)
params[:image][0].tempfile
params[:image][0]
params[:image].to_s
params[:image].tempfile
params[:image]
MimeMagic.by_magic(params[image])
MimeMagic.by_magic(params[:image])
MimeMagic.by_magic(params[:image][0])
MimeMagic.by_magic(params[:image][0].path)
MimeMagic.by_magic(params[:image][0].tempfile)
MimeMagic.by_magic(params[:image][0])
MimeMagic.by_path(params[:image][0])
MimeMagic.by_magic(params[:image][0])
params[:image][0].path
params[:image][0]
params[:image]
params[:image].path
params[:image]
continue
MimeMagic.by_magic(params[:image][0].path)
MimeMagic.by_magic(params[:image][0])
MimeMagic.by_magic(params[:image].path)
MimeMagic.by_magic(params[:image])
MimeMagic.by_magic(params[:image][0])
params[:image][0]
params[:image]
