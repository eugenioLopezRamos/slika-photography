continue
File.unlink(file)
file.inspect
file.close
file
continue
zip_entry.size
file.size
zip_entry
file
continue
zip_entry.compressed_size
zip_entry.size
zip_entry.inspect
zip_entry.methods
q
continue
File.basename(path)
File.basename(path)[2]
File.basename(path)[1]
File.basename(path)[0]
File.basename(path)
continue
Dir[Rails.root/tmp].entries
Dir[Rails.root/tmp].contents
Dir[path].contents
Dir[path].entries
Dir[path].entrie
Dir[path]
Dir(path)
continue
path
end
puts filename
Dir["#{Rails.root}/tmp"].entries.each do |filename|
end
puts filename
Dir["#{Rails.root}/tmp"]entries.each do |filename|
end
puts filename
#filename.match(/temp\.zip(\w*\-*)*/)[0]
Dir["#{Rails.root}/tmp"].each do |filename|
end
filename.match(/temp\.zip(\w*\-*)*/)[0]
Dir["#{Rails.root}/tmp"].each do |filename|
"#{Rails.root}/tmp"
end
filename.match(/temp\.zip(\w*\-*)*/)[0]
Dir["#{Rails.root}/tmp"].each do |filename|
end
filename.match(/temp\.zip(\w*\-*)*/)[0]
Dir[path].each do |filename|
end
filename.match(/temp\.zip(\w*\-*)*/)[0]
Dir[path] do |filename|
irb
Dir[path] do |filename|
Dir[path]
Dir.pwd = path
Dir.pwd
files
path.include?(download_log-12345678.txt)
path.include?('download_log-12345678.txt')
path.include? 'download_log-12345678.txt'
File.file?(path)
Dir(path).each do
path.each
Dir
Dir.show
File.file?(/temp\.zip(\w*\-*)*/)
File.basename(path)
path
FileTest.name
FileTest.name(path)
FileTest.size(path)
Filetest.size(path)
File.basename(path)
File.basename(path)[0]
continue
"temp.zip20160928-10290-1dp0gd5".match(/temp\.zip(\w*\-*)*/)[0]
"temp.zip20160928-10290-1dp0gd5".match(/temp\.zip(\w*\-*)*/)
"temp.zip20160928-10290-1dp0gd5".match(/\"temp\.zip(\w*\-*)*\"/)
"temp.zip20160928-10290-1dp0gd5".match(/(\"temp\.zip(\w*\-*)*\")/)
"temp.zip20160928-10290-1dp0gd5".match(/(\"temp\.zip(\w*\-*)*\")/)[0]
temp.zip20160928-10290-1dp0gd5.match(/(\"temp\.zip(\w*\-*)*\")/)[0]
"temp.zip20160928-10290-1dp0gd5".match(/(\"temp\.zip(\w*\-*)*\")/)[0]
"temp.zip20160928-10290-1dp0gd5".match(/(\"temp\.zip(\w*\-*)*\")/)[]
"temp.zip20160928-10290-1dp0gd5" == (/(\"temp\.zip(\w*\-*)*\")/)
"temp.zip20160928-10290-1dp0gd5" =~ (/(\"temp\.zip(\w*\-*)*\")/)
"temp.zip20160928-10290-1dp0gd5" === (/(\"temp\.zip(\w*\-*)*\")/)
"temp.zip20160928-10290-1dp0gd5".match(/(\"temp\.zip(\w*\-*)*\")/)
zip_file_location
continue
zip_file_location
continue
"temp.zip20160928-9321-xuacts".match(/\"temp\.zip(\w*\-*)*\"/i)
"temp.zip20160928-9321-xuacts".match(/\"temp\.zip(\w*\-*)*\"/)
"temp.zip20160928-9321-xuacts".match(/temp\.zip(\w*\-*)*/)
"temp.zip20160928-9321-xuacts".match("temp.zip/(\w*\-*\w*\-*\w*)*/")
"temp.zip20160928-9321-xuacts".match(temp.zip/(\w*\-*\w*\-*\w*)*/)
"temp.zip20160928-9321-xuacts".match(/temp\.+zip(\w*\-*\w*\-*\w*)*/)
"temp.zip20160928-9321-xuacts".match(/temp.zip(\w*\-*\w*\-*\w*)*/)
"temp.zip20160928-9321-xuacts".match(/temp\.zip(\w*\-*\w*\-*\w*)*/)
"temp.zip20160928-9321-xuacts".match(/temp\.zip(\w*\-*\w*\-*\w*)*)/)
"temp.zip20160928-9321-xuacts".match(/temp\.zip(/(\w*\-*\w*\-*\w*)*)/)
"temp.zip20160928-9321-xuacts".match(/temp\.zip(/(\w*\-*\w*\-*\w*)*)/)/
"temp.zip20160928-9321-xuacts".match(/temp\.zip(/(\w*\-*\w*\-*\w*)*/)/)
"temp.zip#{/(\w*\-*\w*\-*\w*)*/}" == "temp.zip20160928-9321-xuacts"
"temp.zip#{/(\w*\-*\w*\-*\w*)*/}" === "temp.zip20160928-9321-xuacts"
"temp.zip/(\w*\-*\w*\-*\w*)*/" === "temp.zip20160928-9321-xuacts"
"temp.zip#{/(\w*\-*\w*\-*\w*)*/}" === "temp.zip20160928-9321-xuacts"
"temp.zip#{/(\-*\w*)*/}" === "temp.zip20160928-9321-xuacts"
continue
ral t
zip_file_location
continue
zip_file_location
continue
zip_file_location
end
#end
    end
      next
    else
    Find.prune       # Don't look any further into this directory.
      zip_file_location = "#{File.pathname}#{File.basename(path)}"
      if File.basename(path)[0] == "temp.zip-#{/(\-*\w*)*/}"
  #if FileTest.directory?(path)
Find.find("#{Rails.root}/tmp") do |path|
zip_file_location
continue
var local
continue
var local
continue
user
var local
continue
var local
continue
user
var local
continue
var local
user.email
user
continue
user
continue
user
var local
var
continue
self.setup
var const
var args
var
var global
var instance
var
var local
continue
users(:mary)
user(:mary)
users
var instance
var
current_user
continue
user
continue
user.email
user
var local user
var local
user
continue
user.email
user
admin.test
var local
continue
user
continue
user.name
var local
var
continue
user
var local
var
params
continue
log_in_as @notadmin
log_in_as @mary
@notadmin = users(:mary)
self.setup
@notadmin
continue
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r").read
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r").rewind
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r").read
 File.open("#{Rails.root}/tmp/download_log-#{token_param}.txt", "r")
download_log
continue
asdasdsad
q
continue
asdasdasd
asdasdasdasd
continue
params[:'authenticity-token']
continue
params[:authenticity-token']
params[:authenticity-token]
params
continue
araparams
paramsparams
asdasd
continue
params
continue
@operation_results.to_s
continue
"#{@operation_results}"
@operation_results
continue
@download_log.read
download_log.read
@download_log.rewind
@download_log.read
@download_log.write("kek")
@download_log.write("kek"
@download_log
continue
@operation_results
operation_results
continue
@operation_results
debugger
continue
params[:image].image.size
params[:image].size
continue
image
image.tempfile
image
image.tempfile
image
image_file
image.file
continue
@user
del_caller
continue
